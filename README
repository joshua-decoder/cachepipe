Cachepipe: A caching pipeline that doesn't require you to care about it.

-- USAGE -------------------------------------------------------------

$ export CACHEPIPE=/path/to/cachepipe
$ export PERL5LIB=$PERL5LIB:$CACHEPIPE

- From the command line:

    $ perl -MCachePipe -e 'cache("name",["input-file1","input-file2"],COMMAND,["output-file1, output-file2, ..."])'

  e.g., 

    $ perl -MCachePipe -e 'cache("ls",["input-file"],"ls > input-file; cp input-file output-file",["output-file"])'

- From the command line (easier):

    $ source $CACHEPIPE/bashrc
	$ cachecmd ls "ls > input-file" input-file

- From a Perl script:

    my $pipe = new CachePipe();
    $pipe->cmd($name,\@input_deps,$cmd,\@output_deps);

  e.g.,

    $pipe->cmd("ls",["input-file"],"ls > input-file; cp input-file output-file",["output-file"]);

You can tell the command to build the cache files without actually
running the command using the --cache-only flag between the command
name and the command, i.e.

    $ cachecmd ls --cache-only "ls > input-file" input-file

This will compute the hash over all the dependencies and the command as
if the current state were the desired state.
